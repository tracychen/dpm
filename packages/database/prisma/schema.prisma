// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String  @id @default(cuid())
  evmAddress       String? @unique
  privateKey       String?
  custodialAddress String?

  nativeTokenAirdropHash String?
  erc20TokenAirdropHash  String?

  imageUrl String?
  apiKey   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Posts
  posts Post[]

  // Reactions
  reactions Reaction[]

  // Markets
  markets Market[]

  // UserShares
  userShares UserShare[]
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User
  user   User   @relation(fields: [userId], references: [id])
  userId String

  // Post
  body     String?
  marketId String?

  // Reactions
  reactions Reaction[]

  @@index([marketId])
}

model Reaction {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User
  user   User   @relation(fields: [userId], references: [id])
  userId String

  // Post
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  // Reaction
  reaction ReactionType
}

enum ReactionType {
  LIKE
  DISLIKE
}

model MarketOptionHistory {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Market
  marketId String

  // Option
  optionId String

  // Value
  value Float

  @@index([marketId, optionId])
}

enum MarketType {
  BINARY
  MULTIPLE_CHOICE
}

model Market {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User
  user   User   @relation(fields: [userId], references: [id])
  userId String

  // Market
  title       String
  description String?
  resolution  String?
  imageUrl    String?
  bannerUrl   String?
  topic       String
  marketType  MarketType
  closeAt     DateTime
  options     Option[]

  // UserShares
  userShares UserShare[]

  @@index([userId])
}

model Option {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Market
  market   Market @relation(fields: [marketId], references: [id], onDelete: Cascade)
  marketId String

  // Option
  title String?

  // UserShares
  userShares UserShare[]

  @@index([marketId])
}

enum Outcome {
  YES
  NO
}

model UserShare {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User
  user   User   @relation(fields: [userId], references: [id])
  userId String

  // Market
  market   Market @relation(fields: [marketId], references: [id], onDelete: Cascade)
  marketId String

  option   Option @relation(fields: [optionId], references: [id])
  optionId String

  outcome Outcome

  // Shares
  shares Float

  @@index([userId])
}
