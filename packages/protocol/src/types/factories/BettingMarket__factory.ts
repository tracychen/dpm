/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { BettingMarket, BettingMarketInterface } from "../BettingMarket";

const _abi = [
  {
    type: "constructor",
    name: "",
    inputs: [
      {
        type: "string",
        name: "_title",
        internalType: "string",
      },
      {
        type: "uint256",
        name: "_numOptions",
        internalType: "uint256",
      },
      {
        type: "address",
        name: "_paymentTokenAddress",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "MarketCreated",
    inputs: [
      {
        type: "string",
        name: "_marketTitle",
        indexed: false,
        internalType: "string",
      },
      {
        type: "uint256",
        name: "_totalOptions",
        indexed: false,
        internalType: "uint256",
      },
    ],
    outputs: [],
    anonymous: false,
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        type: "address",
        name: "previousOwner",
        indexed: true,
        internalType: "address",
      },
      {
        type: "address",
        name: "newOwner",
        indexed: true,
        internalType: "address",
      },
    ],
    outputs: [],
    anonymous: false,
  },
  {
    type: "event",
    name: "SharesPurchased",
    inputs: [
      {
        type: "uint256",
        name: "_optionId",
        indexed: true,
        internalType: "uint256",
      },
      {
        type: "address",
        name: "_buyer",
        indexed: true,
        internalType: "address",
      },
      {
        type: "uint256",
        name: "_amount",
        indexed: false,
        internalType: "uint256",
      },
    ],
    outputs: [],
    anonymous: false,
  },
  {
    type: "event",
    name: "SharesSold",
    inputs: [
      {
        type: "uint256",
        name: "_optionId",
        indexed: true,
        internalType: "uint256",
      },
      {
        type: "address",
        name: "_seller",
        indexed: true,
        internalType: "address",
      },
      {
        type: "uint256",
        name: "_amount",
        indexed: false,
        internalType: "uint256",
      },
    ],
    outputs: [],
    anonymous: false,
  },
  {
    type: "function",
    name: "getOptionDetails",
    inputs: [
      {
        type: "uint256",
        name: "_optionId",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        type: "uint256",
        name: "",
        internalType: "uint256",
      },
      {
        type: "uint256",
        name: "",
        internalType: "uint256",
      },
      {
        type: "uint256",
        name: "",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "marketTitle",
    inputs: [],
    outputs: [
      {
        type: "string",
        name: "",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "options",
    inputs: [
      {
        type: "uint256",
        name: "",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        type: "uint256",
        name: "totalShares",
        internalType: "uint256",
      },
      {
        type: "uint256",
        name: "yesShares",
        internalType: "uint256",
      },
      {
        type: "uint256",
        name: "noShares",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        type: "address",
        name: "",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "paymentToken",
    inputs: [],
    outputs: [
      {
        type: "address",
        name: "",
        internalType: "contract IERC20",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "purchaseShares",
    inputs: [
      {
        type: "uint256",
        name: "_optionId",
        internalType: "uint256",
      },
      {
        type: "uint256",
        name: "_amount",
        internalType: "uint256",
      },
      {
        type: "uint256",
        name: "_outcome",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "renounceOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "sellShares",
    inputs: [
      {
        type: "uint256",
        name: "_optionId",
        internalType: "uint256",
      },
      {
        type: "uint256",
        name: "_amount",
        internalType: "uint256",
      },
      {
        type: "uint256",
        name: "_outcome",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setPaymentToken",
    inputs: [
      {
        type: "address",
        name: "_paymentTokenAddress",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "totalOptions",
    inputs: [],
    outputs: [
      {
        type: "uint256",
        name: "",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        type: "address",
        name: "newOwner",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "userOptions",
    inputs: [
      {
        type: "address",
        name: "",
        internalType: "address",
      },
      {
        type: "uint256",
        name: "",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        type: "uint256",
        name: "totalShares",
        internalType: "uint256",
      },
      {
        type: "uint256",
        name: "yesShares",
        internalType: "uint256",
      },
      {
        type: "uint256",
        name: "noShares",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
] as const;

export class BettingMarket__factory {
  static readonly abi = _abi;
  static createInterface(): BettingMarketInterface {
    return new utils.Interface(_abi) as BettingMarketInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BettingMarket {
    return new Contract(address, _abi, signerOrProvider) as BettingMarket;
  }
}
